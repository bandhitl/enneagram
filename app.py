import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# -----------------------------------
# 1) ‡πÇ‡∏´‡∏•‡∏î+‡∏™‡∏•‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
# -----------------------------------
@st.cache_data
def load_questions():
    df = pd.read_csv("questions.csv")
    # ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (random_state ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà)
    return df.sample(frac=1, random_state=42).reset_index(drop=True)

df_questions = load_questions()

# -----------------------------------
# 2) ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏Å‡∏•‡∏≤‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Core ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô)
# -----------------------------------
universal_sub_questions = [
    {
        'question': '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å?',
        'choices': [
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á / ‡∏à‡∏£‡∏¥‡∏¢‡∏ò‡∏£‡∏£‡∏° (Type 1)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö (Type 2)',
            '‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Type 3)',
            '‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå (Type 4)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏•‡∏∂‡∏Å (Type 5)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô (Type 6)',
            '‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å (Type 7)',
            '‡∏û‡∏•‡∏±‡∏á‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (Type 8)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á (Type 9)'
        ]
    },
    {
        'question': '‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ß‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï?',
        'choices': [
            '‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏≤‡∏á‡∏®‡∏µ‡∏•‡∏ò‡∏£‡∏£‡∏° (1)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (2)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à (3)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à (4)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (5)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏¢‡∏∂‡∏î / ‡πÇ‡∏î‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (6)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ö‡∏∑‡πà‡∏≠ / ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î (7)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏£‡πâ‡∏û‡∏•‡∏±‡∏á / ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏á‡∏≥ (8)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏∏‡πà‡∏ô‡∏ß‡∏≤‡∏¢ (9)'
        ]
    }
]

# -----------------------------------
# 3) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° session_state
# -----------------------------------
if "main_submitted" not in st.session_state:
    st.session_state.main_submitted = False
if "responses" not in st.session_state:
    st.session_state.responses = []
if "sub_submitted" not in st.session_state:
    st.session_state.sub_submitted = False
if "sub_answers" not in st.session_state:
    st.session_state.sub_answers = {}

# -----------------------------------
# 4) UI ‡πÅ‡∏•‡∏∞ Main Form
# -----------------------------------
st.set_page_config(page_title="Enneagram Deep Test", layout="wide")
st.title("üß† Enneagram 81-Question Test (Core / Shadow / Behavior)")

st.markdown("### ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠ (1 = ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏•‡∏¢, 5 = ‡∏ï‡∏£‡∏á‡∏°‡∏≤‡∏Å)")

with st.form("enneagram_form"):
    temp_responses = []
    for idx, row in df_questions.iterrows():
        score = st.slider(
            f"‡∏Ç‡πâ‡∏≠ {row['Question Number']}: {row['Question (Thai)'].split('‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö')[0].strip()}",
            1, 5, 3,
            key=f"main_slider_{idx}"
        )
        temp_responses.append({
            "Type": row["Enneagram Type"],
            "Category": row["Question Category"],
            "Score": score
        })

    if st.form_submit_button("‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"):
        st.session_state.main_submitted = True
        st.session_state.responses = temp_responses

# -----------------------------------
# 5) Process ‡πÅ‡∏•‡∏∞‡πÇ‡∏ä‡∏ß‡πå‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å
# -----------------------------------
if st.session_state.main_submitted:
    df_resp = pd.DataFrame(st.session_state.responses)
    summary = df_resp.groupby(["Type", "Category"]).mean(numeric_only=True).reset_index()
    pivot_table = summary.pivot(index="Type", columns="Category", values="Score").fillna(0)

    st.markdown("## üìä ‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ")
    st.dataframe(pivot_table.style.background_gradient(cmap="YlGnBu"))

    # ‚Äî Radar Chart Core ‚Äî
    core_scores = pivot_table.get("Core", pd.Series(dtype=float))
    if not core_scores.empty:
        labels = [t.replace("Type ", "T") for t in core_scores.index]
        values = core_scores.values.tolist()
        angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
        values += values[:1]; angles += angles[:1]

        fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
        ax.plot(angles, values, linewidth=2, linestyle='solid')
        ax.fill(angles, values, alpha=0.25)
        ax.set_thetagrids(np.degrees(angles[:-1]), labels)
        st.pyplot(fig)

        # ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‚Äì‡∏£‡∏≠‡∏á
        sorted_scores = core_scores.sort_values(ascending=False)
        top_type = sorted_scores.index[0]
        second_type = sorted_scores.index[1]
        top_score = sorted_scores.iloc[0]
        second_score = sorted_scores.iloc[1]

        type_num = top_type.split(":")[0].replace("Type ", "")
        st.success(f"‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏õ‡πá‡∏ô **Type {type_num}** (Core) ‚Üí {top_type.split(': ')[1]}")

        # ‚Äî Warning ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô ‚Äî
        if abs(top_score - second_score) < 0.2:
            st.warning(
                f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Core ‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á\n"
                f"- {top_type.split(': ')[1]} ({top_score:.2f})\n"
                f"- {second_type.split(': ')[1]} ({second_score:.2f})\n\n"
                "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏¢‡∏Å Core ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô"
            )

            # -----------------------
            # 6) Sub-form ‡πÉ‡∏ô Expander
            # -----------------------
            with st.expander("üß† ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å Core"):
                with st.form("sub_form"):
                    for q in universal_sub_questions:
                        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏•‡∏á session_state.sub_answers
                        st.session_state.sub_answers[q['question']] = st.radio(
                            q['question'],
                            q['choices'],
                            key=f"sub_radio_{q['question']}"
                        )

                    if st.form_submit_button("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô"):
                        st.session_state.sub_submitted = True

                # ----------
                # 7) ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                # ----------
                if st.session_state.sub_submitted:
                    # (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏£‡∏Å)
                    ans1 = st.session_state.sub_answers[universal_sub_questions[0]['question']]
                    ans2 = st.session_state.sub_answers[universal_sub_questions[1]['question']]

                    st.markdown("### üí° ‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡∏¥‡∏°")
                    st.markdown(f"- ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Äú{ans1}‚Äù ‚Üí ‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÇ‡∏î‡∏¢‚Ä¶")
                    st.markdown(f"- ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ß ‚Äú{ans2}‚Äù ‚Üí ‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‚Ä¶")
