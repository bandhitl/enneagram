import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# ---------- CONFIG ---------- #
st.set_page_config(page_title="Enneagram Deep Test", layout="wide")
st.title("üß† Enneagram 81-Question Test (Core / Shadow / Behavior)")

# ---------- INITIAL DATA ---------- #
def load_questions():
    df = pd.read_csv("questions.csv")  # Required CSV file
    return df

df_questions = load_questions()

# ---------- Universal Sub-questions ---------- #
universal_sub_questions = [
    {
        'question': '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å?',
        'choices': [
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á / ‡∏à‡∏£‡∏¥‡∏¢‡∏ò‡∏£‡∏£‡∏° (Type 1)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö (Type 2)',
            '‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Type 3)',
            '‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå (Type 4)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏•‡∏∂‡∏Å (Type 5)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô (Type 6)',
            '‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å (Type 7)',
            '‡∏û‡∏•‡∏±‡∏á‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (Type 8)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á (Type 9)'
        ]
    },
    {
        'question': '‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ß‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï?',
        'choices': [
            '‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏≤‡∏á‡∏®‡∏µ‡∏•‡∏ò‡∏£‡∏£‡∏° (1)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (2)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à (3)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à (4)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (5)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏¢‡∏∂‡∏î / ‡πÇ‡∏î‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (6)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ö‡∏∑‡πà‡∏≠ / ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î (7)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏£‡πâ‡∏û‡∏•‡∏±‡∏á / ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏á‡∏≥ (8)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏∏‡πà‡∏ô‡∏ß‡∏≤‡∏¢ (9)'
        ]
    }
]

# ---------- USER INPUT ---------- #
st.markdown("### ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠ (1 = ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏•‡∏¢, 5 = ‡∏ï‡∏£‡∏á‡∏°‡∏≤‡∏Å)")
responses = []

with st.form("enneagram_form"):
    for idx, row in df_questions.iterrows():
        score = st.slider(f"{row['Question Number']}. {row['Question (Thai)']}", 1, 5, 3)
        responses.append({
            "Type": row["Enneagram Type"],
            "Category": row["Question Category"],
            "Score": score
        })
    submitted = st.form_submit_button("‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")

# ---------- PROCESSING ---------- #
if submitted:
    df_resp = pd.DataFrame(responses)
    summary = df_resp.groupby(["Type", "Category"]).mean(numeric_only=True).reset_index()
    pivot_table = summary.pivot(index="Type", columns="Category", values="Score").fillna(0)

    st.markdown("## üìä ‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ")
    st.dataframe(pivot_table.style.background_gradient(cmap="YlGnBu"))

    # Radar Chart for Core values
    st.markdown("### üìå Core Radar Chart")
    core_scores = pivot_table["Core"] if "Core" in pivot_table else pd.Series()

    if not core_scores.empty:
        labels = [t.replace("Type ", "T") for t in core_scores.index]
        values = core_scores.values.tolist()
        angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
        values += values[:1]
        angles += angles[:1]

        fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
        ax.plot(angles, values, linewidth=2, linestyle='solid')
        ax.fill(angles, values, alpha=0.25)
        ax.set_thetagrids(np.degrees(angles[:-1]), labels)
        st.pyplot(fig)

        # Analysis
        sorted_scores = core_scores.sort_values(ascending=False)
        top_type = sorted_scores.index[0]
        second_type = sorted_scores.index[1]
        third_type = sorted_scores.index[2]
        top_score = sorted_scores.iloc[0]
        second_score = sorted_scores.iloc[1]
        third_score = sorted_scores.iloc[2]

        type_number = top_type.split(":")[0].replace("Type ", "")
        st.success(f"‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏õ‡πá‡∏ô **Type {type_number}** ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (Core) ‚Üí {top_type.split(': ')[1]}")

        # Wing detection
        type_index = int(type_number)
        wing_candidates = [f"Type {(type_index - 1) or 9}:" , f"Type {(type_index % 9) + 1}:"]
        wing_scores = core_scores.loc[core_scores.index.str.startswith(tuple(wing_candidates))]
        if not wing_scores.empty:
            wing_type = wing_scores.idxmax()
            wing_num = wing_type.split(":")[0].replace("Type ", "")
            st.info(f"Wing ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: **Type {wing_num}** ‚Üí {wing_type.split(': ')[1]}")

        # Core closeness warning: Top 2
        if abs(top_score - second_score) < 0.2:
            st.warning(f"üîç ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Core ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á\n- {top_type.split(': ')[1]} ({top_score:.2f})\n- {second_type.split(': ')[1]} ({second_score:.2f})\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î/‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏ Core ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á")
            with st.expander("üß† ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏¢‡∏Å Core ‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á"):
                for q in universal_sub_questions:
                    st.radio(q['question'], q['choices'], key=q['question'])

        # Core closeness warning: Top 3
        if abs(top_score - third_score) < 0.25:
            st.warning(f"üîé ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° Core ‡∏ú‡∏™‡∏°‡∏à‡∏≤‡∏Å 3 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å:\n- {top_type.split(': ')[1]} ({top_score:.2f})\n- {second_type.split(': ')[1]} ({second_score:.2f})\n- {third_type.split(': ')[1]} ({third_score:.2f})\n\n‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÅ‡∏£‡∏á‡∏ú‡∏•‡∏±‡∏Å‡∏î‡∏±‡∏ô‡∏•‡∏∂‡∏Å‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô")

    st.markdown("### üîé ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢")
    st.markdown("- **Core** = ‡πÅ‡∏£‡∏á‡∏ú‡∏•‡∏±‡∏Å‡∏î‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á\n- **Shadow** = ‡∏à‡∏∏‡∏î‡πÄ‡∏õ‡∏£‡∏≤‡∏∞ ‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏±‡∏ß\n- **Behavior** = ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏´‡πá‡∏ô")
    st.bar_chart(pivot_table)
    st.success("‡∏Å‡∏£‡∏≤‡∏ü‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡πá‡∏ô‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Core, Shadow, Behavior ‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° Wing")
