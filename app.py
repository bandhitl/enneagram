import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# ---------- CONFIG ---------- #
st.set_page_config(page_title="Enneagram Deep Test", layout="wide")
st.title("üß† Enneagram 81-Question Test (Core / Shadow / Behavior)")

# ---------- INITIAL DATA ---------- #
def load_questions():
    df = pd.read_csv("questions.csv")  # Required CSV file
    return df

df_questions = load_questions().sample(frac=1, random_state=42).reset_index(drop=True)

# ---------- Universal Sub-questions ---------- #
universal_sub_questions = [
    {
        'question': '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å?',
        'choices': [
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á / ‡∏à‡∏£‡∏¥‡∏¢‡∏ò‡∏£‡∏£‡∏° (Type 1)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö (Type 2)',
            '‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Type 3)',
            '‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå (Type 4)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏•‡∏∂‡∏Å (Type 5)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô (Type 6)',
            '‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å (Type 7)',
            '‡∏û‡∏•‡∏±‡∏á‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (Type 8)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á (Type 9)'
        ]
    },
    {
        'question': '‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ß‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï?',
        'choices': [
            '‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏≤‡∏á‡∏®‡∏µ‡∏•‡∏ò‡∏£‡∏£‡∏° (1)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (2)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à (3)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à (4)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (5)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏¢‡∏∂‡∏î / ‡πÇ‡∏î‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (6)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ö‡∏∑‡πà‡∏≠ / ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î (7)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏£‡πâ‡∏û‡∏•‡∏±‡∏á / ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏á‡∏≥ (8)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏∏‡πà‡∏ô‡∏ß‡∏≤‡∏¢ (9)'
        ]
    }
]

# ---------- USER INPUT ---------- #
st.markdown("### ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠ (1 = ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏•‡∏¢, 5 = ‡∏ï‡∏£‡∏á‡∏°‡∏≤‡∏Å)")
responses = []

with st.form("enneagram_form"):
    for idx, row in df_questions.iterrows():
        score = st.slider(f"‡∏Ç‡πâ‡∏≠ {row['Question Number']}: {row['Question (Thai)'].split('‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö')[0].strip()}", 1, 5, 3)
        responses.append({
            "Type": row["Enneagram Type"],
            "Category": row["Question Category"],
            "Score": score
        })
    submitted = st.form_submit_button("‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")

# ---------- PROCESSING ---------- #
if submitted:
    df_resp = pd.DataFrame(responses)
    summary = df_resp.groupby(["Type", "Category"]).mean(numeric_only=True).reset_index()
    pivot_table = summary.pivot(index="Type", columns="Category", values="Score").fillna(0)

    st.markdown("## üìä ‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ")
    st.dataframe(pivot_table.style.background_gradient(cmap="YlGnBu"))

    # Radar Chart for Core values
    st.markdown("### üìå Core Radar Chart")
    core_scores = pivot_table["Core"] if "Core" in pivot_table else pd.Series()

    if not core_scores.empty:
        labels = [t.replace("Type ", "T") for t in core_scores.index]
        values = core_scores.values.tolist()
        angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
        values += values[:1]
        angles += angles[:1]

        fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
        ax.plot(angles, values, linewidth=2, linestyle='solid')
        ax.fill(angles, values, alpha=0.25)
        ax.set_thetagrids(np.degrees(angles[:-1]), labels)
        st.pyplot(fig)

        # Analysis
        sorted_scores = core_scores.sort_values(ascending=False)
        top_type = sorted_scores.index[0]
        second_type = sorted_scores.index[1]
        third_type = sorted_scores.index[2]
        top_score = sorted_scores.iloc[0]
        second_score = sorted_scores.iloc[1]
        third_score = sorted_scores.iloc[2]

        type_number = top_type.split(":")[0].replace("Type ", "")
        st.success(f"‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏õ‡πá‡∏ô **Type {type_number}** ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (Core) ‚Üí {top_type.split(': ')[1]}")

        # Wing detection
        type_index = int(type_number)
        wing_candidates = [f"Type {(type_index - 1) or 9}:", f"Type {(type_index % 9) + 1}:"]
        wing_scores = core_scores.loc[core_scores.index.str.startswith(tuple(wing_candidates))]
        wing_description = ""
        if not wing_scores.empty:
            wing_type = wing_scores.idxmax()
            wing_num = wing_type.split(":")[0].replace("Type ", "")
            wing_label = wing_type.split(": ")[1]
            st.info(f"Wing ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: **Type {wing_num}** ‚Üí {wing_label}")

            # ‡∏™‡∏£‡∏∏‡∏õ Core + Wing
            core_label = top_type.split(": ")[1]
            st.markdown("---")
            st.markdown(f"### üß¨ ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: **{core_label}** with Wing **{wing_label}**")

            summary_map = {
                "The Reformer": {
                    "strength": "‡∏¢‡∏∂‡∏î‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ã‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏¢‡πå ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á",
                    "stress": "‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏î‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á",
                    "conflict": "‡∏°‡∏±‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡πÉ‡∏à‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
                    "synergy": "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡∏°‡∏≤ ‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û‡∏Å‡∏é‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô"
                },
                "The Helper": {
                    "strength": "‡πÄ‡∏´‡πá‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏à ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô",
                    "stress": "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏£‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
                    "conflict": "‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡πá‡∏ô‡∏ä‡∏≤ ‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤",
                    "synergy": "‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏à ‡∏£‡∏±‡∏ö‡∏£‡∏π‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ"
                },
                "The Achiever": {
                    "strength": "‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                    "stress": "‡∏Å‡∏•‡∏±‡∏ß‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÅ‡∏•‡∏∞‡∏¢‡∏∂‡∏î‡∏†‡∏≤‡∏û‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå",
                    "conflict": "‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ä‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≤‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û",
                    "synergy": "‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏¢‡∏±‡∏ô ‡∏Ñ‡∏•‡πà‡∏≠‡∏á‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡πà‡∏ß‡∏°"
                },
                "The Individualist": {
                    "strength": "‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á ‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå",
                    "stress": "‡∏≠‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏Ñ‡∏£",
                    "conflict": "‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏∑‡πâ‡∏ô‡πÄ‡∏Ç‡∏¥‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏£‡∏ß‡∏°",
                    "synergy": "‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏à ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô"
                },
                "The Investigator": {
                    "strength": "‡πÉ‡∏ù‡πà‡∏£‡∏π‡πâ ‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á ‡∏ä‡πà‡∏≤‡∏á‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï",
                    "stress": "‡∏ñ‡∏≠‡∏¢‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡πÇ‡∏•‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î",
                    "conflict": "‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πà‡∏á‡πÄ‡∏£‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏±‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î",
                    "synergy": "‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"
                },
                "The Loyalist": {
                    "strength": "‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡∏ã‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏¢‡πå ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏Å‡πà‡∏á",
                    "stress": "‡∏ß‡∏¥‡∏ï‡∏Å‡∏Å‡∏±‡∏á‡∏ß‡∏•‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏•‡∏±‡∏á‡πÄ‡∏•",
                    "conflict": "‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏à ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏à‡∏ö‡πà‡∏≠‡∏¢",
                    "synergy": "‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏£‡πà‡∏ß‡∏°"
                },
                "The Enthusiast": {
                    "strength": "‡∏Ñ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß ‡∏£‡πà‡∏≤‡πÄ‡∏£‡∏¥‡∏á ‡∏°‡∏≠‡∏á‡πÇ‡∏•‡∏Å‡∏ö‡∏ß‡∏Å",
                    "stress": "‡πÄ‡∏ö‡∏∑‡πà‡∏≠‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î",
                    "conflict": "‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∂‡∏î‡∏ï‡∏¥‡∏î ‡∏Å‡∏î‡∏î‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î",
                    "synergy": "‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏£‡πà‡∏ß‡∏°‡∏™‡∏ô‡∏∏‡∏Å"
                },
                "The Challenger": {
                    "strength": "‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î ‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏Ç‡πá‡∏á ‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô",
                    "stress": "‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ ‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°",
                    "conflict": "‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏≠ ‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°",
                    "synergy": "‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡∏°‡∏≤ ‡πÅ‡∏•‡∏∞‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á"
                },
                "The Peacemaker": {
                    "strength": "‡∏£‡∏±‡∏Å‡∏™‡∏á‡∏ö ‡∏õ‡∏£‡∏∞‡∏ô‡∏µ‡∏õ‡∏£‡∏∞‡∏ô‡∏≠‡∏° ‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏à‡∏ó‡∏∏‡∏Å‡∏ù‡πà‡∏≤‡∏¢",
                    "stress": "‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
                    "conflict": "‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡πÄ‡∏Å‡πà‡∏á ‡∏Å‡∏î‡∏î‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á",
                    "synergy": "‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏£‡πà‡∏á‡πÄ‡∏£‡πâ‡∏≤"
                }
            }

            if core_label in summary_map:
                summary = summary_map[core_label]
                st.markdown(f"#### ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á: {summary['strength']}")
                st.markdown(f"#### ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {summary['stress']}")
                st.markdown(f"#### ‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏ö‡∏ö: {summary['conflict']}")
                st.markdown(f"#### ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏ö‡∏ö: {summary['synergy']}")
        # Core closeness warning: Top 2
        if abs(top_score - second_score) < 0.2:
            st.warning(f"üîç ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Core ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á\n- {top_type.split(': ')[1]} ({top_score:.2f})\n- {second_type.split(': ')[1]} ({second_score:.2f})\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î/‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏ Core ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á")
            with st.expander("üß† ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏¢‡∏Å Core ‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á"):
            answers = {}
            for q in universal_sub_questions:
                answers[q['question']] = st.radio(q['question'], q['choices'], key=q['question'])
            submit_q = st.button("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô")


