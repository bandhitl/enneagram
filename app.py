import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# ---------- CONFIG ---------- #
st.set_page_config(page_title="Enneagram Deep Test", layout="wide")
st.title("üß† Enneagram 81-Question Test (Core / Shadow / Behavior)")

# ---------- INITIAL DATA ---------- #
@st.cache_data
def load_questions():
    df = pd.read_csv("questions.csv")
    return df.sample(frac=1, random_state=42).reset_index(drop=True)

df_questions = load_questions()

# ---------- UNIVERSAL SUB-QUESTIONS ---------- #
universal_sub_questions = [
    {
        'question': '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å?',
        'choices': [
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á / ‡∏à‡∏£‡∏¥‡∏¢‡∏ò‡∏£‡∏£‡∏° (Type 1)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö (Type 2)',
            '‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Type 3)',
            '‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå (Type 4)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏•‡∏∂‡∏Å (Type 5)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô (Type 6)',
            '‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å (Type 7)',
            '‡∏û‡∏•‡∏±‡∏á‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (Type 8)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á (Type 9)'
        ]
    },
    {
        'question': '‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ß‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï?',
        'choices': [
            '‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏≤‡∏á‡∏®‡∏µ‡∏•‡∏ò‡∏£‡∏£‡∏° (Type 1)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (Type 2)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à (Type 3)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à (Type 4)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (Type 5)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏¢‡∏∂‡∏î / ‡πÇ‡∏î‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (Type 6)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ö‡∏∑‡πà‡∏≠ / ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î (Type 7)',
            '‡∏Å‡∏≤‡∏£‡πÑ‡∏£‡πâ‡∏û‡∏•‡∏±‡∏á / ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏á‡∏≥ (Type 8)',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏∏‡πà‡∏ô‡∏ß‡∏≤‡∏¢ (Type 9)'
        ]
    }
]

# ---------- MAPPING FOR SUB-ANALYSIS ---------- #
sub_analysis_map = {
    # Q1
    '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á / ‡∏à‡∏£‡∏¥‡∏¢‡∏ò‡∏£‡∏£‡∏° (Type 1)':       '‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏¢‡∏ò‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å',
    '‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö (Type 2)':    '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏Å‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô',
    '‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Type 3)':       '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
    '‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå (Type 4)':    '‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á',
    '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏•‡∏∂‡∏Å (Type 5)':        '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ô‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à',
    '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô (Type 6)':   '‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á',
    '‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å (Type 7)':           '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡πÅ‡∏•‡∏∞‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à',
    '‡∏û‡∏•‡∏±‡∏á‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (Type 8)':      '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏Ç‡πá‡∏á',
    '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á (Type 9)': '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
    # Q2
    '‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏≤‡∏á‡∏®‡∏µ‡∏•‡∏ò‡∏£‡∏£‡∏° (Type 1)':        '‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ß‡∏ó‡∏≥‡∏ú‡∏¥‡∏î‡∏à‡∏£‡∏¥‡∏¢‡∏ò‡∏£‡∏£‡∏° ‡∏à‡∏∂‡∏á‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡πà‡∏ß‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô',
    '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (Type 2)':           '‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ß‡πÑ‡∏£‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤ ‡∏à‡∏∂‡∏á‡∏î‡∏π‡πÅ‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÑ‡∏ß‡πâ‡πÄ‡∏™‡∏°‡∏≠',
    '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à (Type 3)': '‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ß‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏û‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå ‡∏à‡∏∂‡∏á‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô‡∏™‡∏π‡∏á',
    '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à (Type 4)':           '‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ß‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à',
    '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (Type 5)': '‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ß‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏à‡∏∂‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡πÄ‡∏™‡∏≤‡∏∞‡∏´‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ',
    '‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏¢‡∏∂‡∏î / ‡πÇ‡∏î‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (Type 6)': '‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ß‡πÑ‡∏£‡πâ‡∏ó‡∏µ‡πà‡∏û‡∏∂‡πà‡∏á ‡∏à‡∏∂‡∏á‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á',
    '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ö‡∏∑‡πà‡∏≠ / ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î (Type 7)':     '‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ß‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ö‡∏∑‡πà‡∏≠ ‡∏à‡∏∂‡∏á‡πÅ‡∏™‡∏ß‡∏á‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢',
    '‡∏Å‡∏≤‡∏£‡πÑ‡∏£‡πâ‡∏û‡∏•‡∏±‡∏á / ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏á‡∏≥ (Type 8)':       '‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ß‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏á‡∏≥ ‡∏à‡∏∂‡∏á‡∏¢‡∏∑‡∏ô‡∏´‡∏¢‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏¥‡∏™‡∏£‡∏†‡∏≤‡∏û',
    '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏∏‡πà‡∏ô‡∏ß‡∏≤‡∏¢ (Type 9)':   '‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ß‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏∏‡πà‡∏ô‡∏ß‡∏≤‡∏¢ ‡∏à‡∏∂‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏ô‡∏ï‡∏¥'
}

# ---------- TYPE PROFILE MAPPING ---------- #
type_profile_map = {
    '1': '‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡∏°‡∏≤ ‡∏ã‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏¢‡πå ‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û ‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ú‡πà‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á',
    '2': '‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÄ‡∏Å‡πà‡∏á ‡πÉ‡∏™‡πà‡πÉ‡∏à‡∏Ñ‡∏ô‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á ‡∏à‡∏ô‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∑‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á',
    '3': '‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡πâ‡∏≤ ‡πÅ‡∏ï‡πà‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡∏Å‡∏î‡∏î‡∏±‡∏ô‡∏ó‡∏µ‡∏°‡∏™‡∏π‡∏á',
    '4': '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå ‡∏°‡∏µ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á ‡πÅ‡∏ï‡πà‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏à‡∏™‡∏∞‡∏î‡∏∏‡∏î‡∏´‡∏≤‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏ß‡∏ô',
    '5': '‡∏ä‡∏≠‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡∏ñ‡∏≤‡∏°‡πÄ‡∏¢‡∏≠‡∏∞ ‡∏°‡∏µ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡πÄ‡∏â‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏° ‡πÅ‡∏ï‡πà‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡∏î‡∏π‡πÄ‡∏ô‡∏¥‡∏£‡πå‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ',
    '6': '‡∏£‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏ö ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡πÅ‡∏ï‡πà‡∏°‡∏±‡∏Å‡∏Å‡∏±‡∏á‡∏ß‡∏•‡∏à‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ä‡πâ‡∏≤',
    '7': '‡∏Å‡∏£‡∏∞‡∏â‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡πÄ‡∏â‡∏á ‡∏£‡∏¥‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÜ ‡πÅ‡∏ï‡πà‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏°‡∏≤‡∏ò‡∏¥‡∏™‡∏±‡πâ‡∏ô',
    '8': '‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î ‡∏Å‡∏•‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≠‡∏Å ‡πÅ‡∏ï‡πà‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡∏≠‡∏≤‡∏à‡∏î‡∏π‡πÄ‡∏Å‡∏£‡∏µ‡πâ‡∏¢‡∏ß‡∏Å‡∏£‡∏≤‡∏î',
    '9': '‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏ö‡∏≤‡∏¢‡πÜ ‡πÅ‡∏ï‡πà‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡∏Å‡πá‡πÄ‡∏â‡∏∑‡πà‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤'
}

# ---------- SESSION STATE ---------- #
for key in ['main_submitted','sub_submitted','responses','sub_answers']:
    if key not in st.session_state:
        st.session_state[key] = False if 'submitted' in key else []

# ---------- MAIN FORM ---------- #
st.markdown("### ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠ (1 = ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏•‡∏¢, 5 = ‡∏ï‡∏£‡∏á‡∏°‡∏≤‡∏Å)")
with st.form('main_form'):
    temp_responses = []
    for idx, row in df_questions.iterrows():
        score = st.slider(
            f"‡∏Ç‡πâ‡∏≠ {row['Question Number']}: {row['Question (Thai)'].split('‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö')[0].strip()}",
            1,5,3, key=f"main_{idx}"
        )
        temp_responses.append({'Type':row['Enneagram Type'],'Category':row['Question Category'],'Score':score})
    if st.form_submit_button('‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå'):
        st.session_state.main_submitted = True
        st.session_state.responses = temp_responses

# ---------- SHOW RESULTS ---------- #
if st.session_state.main_submitted:
    df_resp = pd.DataFrame(st.session_state.responses)
    summary = df_resp.groupby(['Type','Category']).mean(numeric_only=True).reset_index()
    pivot = summary.pivot(index='Type',columns='Category',values='Score').fillna(0)

    # Top & second
    core = pivot.get('Core',pd.Series(dtype=float))
    sorted_core = core.sort_values(ascending=False)
    top, second = sorted_core.index[0], sorted_core.index[1]
    top_score, second_score = sorted_core.iloc[0], sorted_core.iloc[1]

    # Display main
    num = top.split(':')[0].replace('Type ','')
    label = top.split(': ')[1]
    st.success(f"‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏õ‡πá‡∏ô Type {num} ‚Üí {label}")
    # Profile description
    desc = type_profile_map.get(num, '')
    st.markdown(f"**‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô:** {desc}")

    # Collaborators & caution
    collab = sorted_core.iloc[1:3].index
    caution = sorted_core.iloc[-2:].index
    st.markdown('#### ü§ù ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Ñ')
    for t in collab:
        n,l = t.split(': ')
        st.markdown(f"- **{n}** ({l})")
    st.markdown('#### ‚ö†Ô∏è ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢')
    for t in caution:
        n,l = t.split(': ')
        st.markdown(f"- **{n}** ({l})")

    # Radar chart
    labels = [t.replace('Type ','T') for t in core.index]
    vals = core.tolist(); angles = np.linspace(0,2*np.pi,len(vals),endpoint=False).tolist()
    vals+=vals[:1]; angles+=angles[:1]
    fig,ax = plt.subplots(figsize=(5,5),subplot_kw={'polar':True})
    ax.plot(angles, vals, linewidth=2)
    ax.fill(angles, vals, alpha=0.3)
    ax.set_thetagrids(np.degrees(angles[:-1]), labels)
    st.pyplot(fig)

    # Sub questions if tied
    if abs(top_score-second_score)<0.2:
        st.warning('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Core ‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô! ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î')
        with st.expander('üß† ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏™‡∏£‡∏¥‡∏°'):
            with st.form('sub'):
                for q in universal_sub_questions:
                    st.session_state.sub_answers[q['question']] = st.radio(q['question'],q['choices'],key=q['question'])
                if st.form_submit_button('‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå'): st.session_state.sub_submitted=True
            if st.session_state.sub_submitted:
                a1=st.session_state.sub_answers[universal_sub_questions[0]['question']]
                a2=st.session_state.sub_answers[universal_sub_questions[1]['question']]
                t1=sub_analysis_map.get(a1,''); t2=sub_analysis_map.get(a2,'')
                st.markdown(f"- ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '{a1}' ‚Üí {t1}")
                st.markdown(f"- ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ß '{a2}' ‚Üí {t2}")
